import numpy as np
import random

N = 160


def sign(b):
    if b >= 0:
        return 1
    else:
        return -1


def store_pattern(p):
    w_i = np.zeros((N, N))
    for i in range(5):      # for every pattern
        w_i = w_i + np.dot(p[i, :], np.conj(p[i, :]).T)
    w_i = w_i / N
    np.fill_diagonal(w_i, 0)
    return w_i


def reshape(p):
    p1 = np.reshape(p[0], (16,10))
    p2 = np.reshape(p[1], (16,10))
    p3 = np.reshape(p[2], (16,10))
    p4 = np.reshape(p[3], (16,10))
    p5 = np.reshape(p[4], (16,10))
    return p1, p2, p3, p4, p5


def initialize_patterns():
    x1 = np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
          -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1,
          1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1,
          -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1,
          1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
          -1, -1, -1])

    x2 = np.array([-1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
          -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
          -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
          -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
          -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1,
          -1, -1, -1, 1, 1, 1, 1, -1, -1, -1])

    x3 = np.array([1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1,
          -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1,
          -1, -1, -1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, -1, -1,
          -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
          -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1,
          1, -1, -1])

    x4 = np.array([-1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
          -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1,
          -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1,
          -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1,
          -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1,
          1, 1, 1, 1, 1, -1, -1])

    x5 = np.array([-1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
          -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
          -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1,
          -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1,
          -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
          -1, -1, -1, -1, -1, -1, -1, 1, 1, -1])

    return x1, x2, x3, x4, x5
def feed_pattern(a):
    if a == 1:
        p = [[-1, 1, 1, 1, 1, -1, 1, 1, -1, -1], [-1, 1, 1, 1, 1, -1, 1, 1, -1, -1], [1, -1, -1, -1, -1, -1, 1, 1, -1, -1],
               [1, -1, -1, -1, -1, -1, 1, 1, -1, -1], [1, -1, -1, -1, -1, -1, 1, 1, -1, -1], [1, -1, -1, -1, -1, -1, 1, 1, -1, -1],
               [1, -1, -1, -1, -1, -1, 1, 1, -1, -1], [-1, 1, 1, 1, 1, -1, 1, 1, -1, -1], [-1, 1, 1, 1, 1, -1, 1, 1, -1, -1],
               [-1, 1, 1, -1, -1, 1, -1, -1, -1, -1], [-1, 1, 1, -1, -1, 1, -1, -1, -1, -1], [-1, 1, 1, -1, -1, 1, -1, -1, -1, -1],
               [-1, 1, 1, -1, -1, 1, -1, -1, -1, -1], [-1, 1, 1, -1, -1, 1, -1, -1, -1, -1], [-1, 1, 1, 1, 1, -1, 1, 1, -1, -1],
               [-1, 1, 1, 1, 1, -1, 1, 1, -1, -1]]

    return p


if __name__ == "__main__":
    
    p1, p2, p3, p4, p5 = initialize_patterns()
    p = np.array([p1, p2, p3, p4, p5])
    w = store_pattern(p)
    p1, p2, p3, p4, p5 = reshape(p)

    #n_update = random.randint(0, N - 1)
    #p_feed = feed_pattern(1)

    #S_1 = sign(np.dot(w, p_feed))
    print("-")